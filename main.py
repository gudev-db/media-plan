import streamlit as st
import pandas as pd
import google.generativeai as genai
import os
from typing import Dict, Any

# Configura√ß√£o inicial
st.set_page_config(
    layout="wide",
    page_title="IA de Planejamento de M√≠dia",
    page_icon="üìä"
)

# CSS personalizado
st.markdown("""
<style>
    /* Estilos gerais */
    .main {
        background-color: #f5f7fa;
    }
    .stTextInput input, .stSelectbox select, .stTextArea textarea {
        border-radius: 8px !important;
        border: 1px solid #d1d5db !important;
    }
    .stButton button {
        background-color: #4f46e5 !important;
        color: white !important;
        border-radius: 8px !important;
        padding: 10px 24px !important;
        font-weight: 500 !important;
    }
    .stButton button:hover {
        background-color: #4338ca !important;
    }
    /* Cards de resultado */
    .result-card {
        background-color: white;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }
    /* Tabelas */
    table {
        width: 100%;
        border-collapse: collapse;
    }
    th, td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #e5e7eb;
    }
    th {
        background-color: #f9fafb;
        font-weight: 600;
    }
    /* Abas */
    .stTabs [aria-selected="true"] {
        color: #4f46e5 !important;
        font-weight: 600 !important;
    }
</style>
""", unsafe_allow_html=True)

# Inicializar Gemini
gemini_api_key = os.getenv("GEM_API_KEY")
genai.configure(api_key=gemini_api_key)
modelo_texto = genai.GenerativeModel("gemini-1.5-flash")

# T√≠tulo do aplicativo
st.title("üìä IA para Planejamento de M√≠dia")
st.markdown("""
**Crie planos de m√≠dia otimizados com aloca√ß√£o autom√°tica de verba por estrat√©gia, plataforma e localiza√ß√£o.**
""")

# Estado da sess√£o para armazenar resultados intermedi√°rios
if 'plano_completo' not in st.session_state:
    st.session_state.plano_completo = {}
if 'current_step' not in st.session_state:
    st.session_state.current_step = 0

# Dicion√°rios de m√©tricas por etapa do funil
METRICAS_POR_ETAPA = {
    'Topo': ['Impress√µes', 'Alcance', 'Frequ√™ncia', 'CPM', 'Brand Lift', 'Engajamento', 'Video Views'],
    'Meio': ['Engajamento', 'CTR', 'Cliques', 'Tempo no Site', 'Pages per Visit', 'Video Completions', 'Lead Generation'],
    'Fundo': ['Convers√µes', 'ROAS', 'CPA', 'Valor da Convers√£o', 'Leads Qualificados', 'Vendas', 'Custo por Lead']
}

def detectar_etapa_funil(nome_campanha: str) -> str:
    """Detecta automaticamente a etapa do funil com base no nome da campanha"""
    nome = nome_campanha.lower()
    
    # Palavras-chave para cada etapa
    topo_keywords = ['awareness', 'consciencia', 'alcance', 'branding', 'marca', 'topo', 'reconhecimento']
    meio_keywords = ['consideracao', 'considera√ß√£o', 'engajamento', 'video', 'v√≠deo', 'traffic', 'tr√°fego', 'meio']
    fundo_keywords = ['conversao', 'convers√£o', 'venda', 'sales', 'lead', 'performance', 'fundo', 'compra']
    
    if any(keyword in nome for keyword in topo_keywords):
        return 'Topo'
    elif any(keyword in nome for keyword in meio_keywords):
        return 'Meio'
    elif any(keyword in nome for keyword in fundo_keywords):
        return 'Fundo'
    else:
        return 'Topo'  # Default para topo de funil se n√£o identificar

# Fun√ß√µes de gera√ß√£o de conte√∫do com IA
def gerar_recomendacao_estrategica(params: Dict[str, Any]) -> str:
    """Gera a recomenda√ß√£o estrat√©gica inicial"""
    etapa_funil = detectar_etapa_funil(params['objetivo_campanha'])
    okrs_relevantes = METRICAS_POR_ETAPA[etapa_funil]
    
    prompt = f"""
    Como especialista em planejamento de m√≠dia digital, analise os seguintes par√¢metros e forne√ßa uma recomenda√ß√£o estrat√©gica:

    **Campanha:** {params['objetivo_campanha']} (Etapa do Funil: {etapa_funil})
    **Tipo de Campanha:** {params['tipo_campanha']}
    **Budget Total:** R$ {params['budget']:,.2f}
    **Per√≠odo da Campanha:** {params['periodo']}
    **Ferramentas/Plataformas:** {", ".join(params['ferramentas'])}
    **Localiza√ß√£o Prim√°ria:** {params['localizacao_primaria']}
    **Localiza√ß√£o Secund√°ria:** {params['localizacao_secundaria']}
    **Tipo de P√∫blico:** {params['tipo_publico']}
    **Tipos de Criativo:** {", ".join(params['tipo_criativo'])}
    **OKRs Relevantes para {etapa_funil} do Funil:** {", ".join(okrs_relevantes)}
    **Detalhes da A√ß√£o:** {params['detalhes_acao'] or "Nenhum"}
    **Observa√ß√µes:** {params['observacoes'] or "Nenhuma"}

    Forne√ßa:
    1. An√°lise estrat√©gica focada em {etapa_funil} do funil (150-200 palavras)
    2. Principais oportunidades para a etapa {etapa_funil}
    3. Riscos potenciais espec√≠ficos para esta etapa
    4. Recomenda√ß√£o geral de abordagem com foco nos OKRs: {", ".join(okrs_relevantes)}

    Dicas:
    - Mantenha o foco absoluto nos OKRs relevantes para {etapa_funil} do funil
    - Considere apenas os tipos de criativo solicitados
    - Adapte ao per√≠odo especificado

    Formato: Markdown com headers (##, ###)
    """
    response = modelo_texto.generate_content(prompt)
    return response.text

def gerar_distribuicao_budget(params: Dict[str, Any], recomendacao_estrategica: str) -> str:
    """Gera a distribui√ß√£o de budget baseada na recomenda√ß√£o estrat√©gica"""
    etapa_funil = detectar_etapa_funil(params['objetivo_campanha'])
    
    prompt = f"""
    Com base na seguinte recomenda√ß√£o estrat√©gica (Etapa {etapa_funil} do Funil):
    {recomendacao_estrategica}

    E nos par√¢metros originais:
    - Budget: R$ {params['budget']:,.2f}
    - Per√≠odo: {params['periodo']}
    - Plataformas: {", ".join(params['ferramentas'])}
    - Localiza√ß√µes: Prim√°ria ({params['localizacao_primaria']}), Secund√°ria ({params['localizacao_secundaria']})
    - Tipos de Criativo: {", ".join(params['tipo_criativo'])}

    Crie uma tabela detalhada de distribui√ß√£o de budget OTIMIZADA PARA {etapa_funil} DO FUNIL com:
    1. Divis√£o por plataforma (% e valor)
    2. Aloca√ß√£o geogr√°fica (prim√°ria vs secund√°ria)
    3. Tipos de criativos recomendados (APENAS: {", ".join(params['tipo_criativo'])})
    4. Justificativa estrat√©gica para cada aloca√ß√£o considerando a etapa {etapa_funil}

    REGRAS:
    - Distribui√ß√£o deve maximizar os OKRs da etapa {etapa_funil}
    - N√£o sugerir criativos fora dos tipos especificados
    - Manter foco absoluto nos estados solicitados
    - Adaptar ao per√≠odo da campanha

    Inclua tamb√©m uma breve an√°lise (50-100 palavras) explicando como a distribui√ß√£o atende √† etapa {etapa_funil}.

    Formato: Markdown com tabelas (use | para divis√£o)
    """
    response = modelo_texto.generate_content(prompt)
    return response.text

def gerar_previsao_resultados(params: Dict[str, Any], recomendacao_estrategica: str, distribuicao_budget: str) -> str:
    """Gera previs√£o de resultados baseada nos par√¢metros"""
    etapa_funil = detectar_etapa_funil(params['objetivo_campanha'])
    okrs_relevantes = METRICAS_POR_ETAPA[etapa_funil]
    
    prompt = f"""
    Com base na estrat√©gia para {etapa_funil} do funil:
    {recomendacao_estrategica}

    E na distribui√ß√£o de budget:
    {distribuicao_budget}

    Estime os resultados ESPERADOS PARA ETAPA {etapa_funil} considerando:
    - Budget total: R$ {params['budget']:,.2f}
    - Per√≠odo: {params['periodo']}
    - OKRs Relevantes: {", ".join(okrs_relevantes)}

    Forne√ßa:
    1. Tabela com m√©tricas ESPEC√çFICAS PARA {etapa_funil} (focar em: {", ".join(okrs_relevantes)})
    2. Estimativas realistas baseadas em benchmarks de {etapa_funil}
    3. An√°lise de potencial desempenho (50-100 palavras)
    4. KPIs CHAVE para monitorar em {etapa_funil}

    DICAS:
    - Ignorar m√©tricas n√£o relevantes para {etapa_funil}
    - Manter foco nos OKRs: {", ".join(okrs_relevantes)}
    - Usar benchmarks realistas para a etapa

    Formato: Markdown com tabelas
    """
    response = modelo_texto.generate_content(prompt)
    return response.text

def gerar_recomendacoes_publico(params: Dict[str, Any], recomendacao_estrategica: str) -> str:
    """Gera recomenda√ß√µes detalhadas de p√∫blico-alvo"""
    etapa_funil = detectar_etapa_funil(params['objetivo_campanha'])
    
    prompt = f"""
    Para a campanha na etapa {etapa_funil} do funil com:
    - Tipo de P√∫blico: {params['tipo_publico']}
    - Objetivo: {params['objetivo_campanha']}
    - Plataformas: {", ".join(params['ferramentas'])}
    - Localiza√ß√µes: {params['localizacao_primaria']} (prim√°ria), {params['localizacao_secundaria']} (secund√°ria)

    E considerando a estrat√©gia para {etapa_funil}:
    {recomendacao_estrategica}

    Desenvolva recomenda√ß√µes de p√∫blico OTIMIZADAS PARA {etapa_funil} DO FUNIL incluindo:
    1. Segmenta√ß√£o espec√≠fica para objetivos de {etapa_funil}
    2. Par√¢metros de targeting focados em {etapa_funil}
    3. Estrat√©gias de expans√£o adequadas para {etapa_funil}
    4. Considera√ß√µes sobre frequ√™ncia e satura√ß√£o

    REGRAS:
    - Manter foco absoluto nos estados especificados
    - Adaptar recomenda√ß√µes √† etapa {etapa_funil}
    - Priorizar estrat√©gias adequadas para {etapa_funil}

    Formato: Markdown com listas e headers
    """
    response = modelo_texto.generate_content(prompt)
    return response.text

def gerar_cronograma(params: Dict[str, Any], recomendacao_estrategica: str, distribuicao_budget: str) -> str:
    """Gera cronograma de implementa√ß√£o"""
    etapa_funil = detectar_etapa_funil(params['objetivo_campanha'])
    
    prompt = f"""
    Com base na estrat√©gia para {etapa_funil} do funil:
    {recomendacao_estrategica}

    E na distribui√ß√£o de budget:
    {distribuicao_budget}

    Crie um cronograma OTIMIZADO PARA ETAPA {etapa_funil} considerando:
    - Budget total: R$ {params['budget']:,.2f}
    - Per√≠odo: {params['periodo']}
    - Plataformas: {", ".join(params['ferramentas'])}

    Inclua:
    1. Fases de implementa√ß√£o adequadas para {etapa_funil}
    2. Distribui√ß√£o temporal do budget
    3. Marcos importantes para {etapa_funil}
    4. Frequ√™ncia de ajustes recomendada

    DICAS:
    - Adaptar cronograma aos objetivos de {etapa_funil}
    - N√£o incluir fases irrelevantes para {etapa_funil}
    - Manter realismo no per√≠odo especificado

    Formato: Markdown com tabelas ou listas numeradas
    """
    response = modelo_texto.generate_content(prompt)
    return response.text

# Abas principais
tab1, tab2 = st.tabs(["üìã Criar Novo Plano", "üìä Exemplos por Etapa"])

with tab1:
    st.header("Informa√ß√µes do Plano de M√≠dia")
    
    with st.form("plano_midia_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            objetivo_campanha = st.text_input(
                "Nome/Objetivo da Campanha*",
                placeholder="Ex: Campanha de Awareness - Marca X",
                value="Campanha de Awareness - Marca X"
            )
            
            tipo_campanha = st.selectbox(
                "Tipo de Campanha*",
                ["Alcance", "Engajamento", "Tr√°fego", "Convers√£o"],
                index=0
            )
            
            budget = st.number_input(
                "Budget Total (R$)*",
                min_value=1000,
                value=100000,
                step=1000
            )
            
            periodo = st.selectbox(
                "Per√≠odo da Campanha*",
                ["1 m√™s", "2 meses", "3 meses", "6 meses", "1 ano"],
                index=0
            )
            
            ferramentas = st.multiselect(
                "Ferramentas/Plataformas*",
                ["Meta Ads (Facebook/Instagram)", "Google Ads", "TikTok", "LinkedIn", 
                 "YouTube", "M√≠dia Program√°tica", "Twitter", "Pinterest"],
                default=["Meta Ads (Facebook/Instagram)", "Google Ads"]
            )
            
        with col2:
            localizacao_primaria = st.text_input(
                "Localiza√ß√£o Prim√°ria (Estados)*",
                placeholder="Ex: MT, GO, RS",
                value="MT, GO, RS"
            )
            
            localizacao_secundaria = st.text_input(
                "Localiza√ß√£o Secund√°ria (Estados)",
                placeholder="Ex: SP, MG, RJ",
                value="SP, MG, RJ"
            )
            
            tipo_publico = st.selectbox(
                "Tipo de P√∫blico*",
                ["Interesses", "Lookalike Audience (LAL)", "Base de Clientes", 
                 "Retargeting", "Comportamento", "Demogr√°fico"],
                index=0
            )
            
            tipo_criativo = st.multiselect(
                "Tipos de Criativo*",
                ["Est√°tico", "V√≠deo", "Carrossel", "Motion", "Story", "Cole√ß√£o"],
                default=["Est√°tico", "V√≠deo"]
            )
        
        detalhes_acao = st.text_area(
            "Detalhes da A√ß√£o*",
            placeholder="Descreva o produto/servi√ßo/evento que ser√° promovido",
            value="Campanha de produtos agr√≠colas para pequenos e m√©dios produtores"
        )
        
        observacoes = st.text_area(
            "Observa√ß√µes Adicionais",
            placeholder="Informa√ß√µes extras sobre a campanha, concorrentes, etc."
        )
        
        submitted = st.form_submit_button("Gerar Plano de M√≠dia")
    
    if submitted:
        if not objetivo_campanha or not tipo_campanha or not budget or not ferramentas or not localizacao_primaria or not detalhes_acao:
            st.error("Por favor, preencha todos os campos obrigat√≥rios (*)")
        else:
            # Detectar etapa do funil automaticamente
            etapa_funil = detectar_etapa_funil(objetivo_campanha)
            okrs_relevantes = METRICAS_POR_ETAPA[etapa_funil]
            
            # Armazenar par√¢metros na sess√£o
            params = {
                'objetivo_campanha': objetivo_campanha,
                'tipo_campanha': tipo_campanha,
                'budget': budget,
                'periodo': periodo,
                'ferramentas': ferramentas,
                'localizacao_primaria': localizacao_primaria,
                'localizacao_secundaria': localizacao_secundaria,
                'tipo_publico': tipo_publico,
                'tipo_criativo': tipo_criativo,
                'detalhes_acao': detalhes_acao,
                'observacoes': observacoes,
                'etapa_funil': etapa_funil,
                'okrs_relevantes': okrs_relevantes
            }
            
            st.session_state.current_step = 1
            st.session_state.params = params
            
            # Gerar todo o conte√∫do de uma vez
            with st.spinner(f'Gerando plano completo para {etapa_funil} do funil...'):
                st.session_state.plano_completo['recomendacao_estrategica'] = gerar_recomendacao_estrategica(params)
                st.session_state.plano_completo['distribuicao_budget'] = gerar_distribuicao_budget(params, st.session_state.plano_completo['recomendacao_estrategica'])
                st.session_state.plano_completo['previsao_resultados'] = gerar_previsao_resultados(params, st.session_state.plano_completo['recomendacao_estrategica'], st.session_state.plano_completo['distribuicao_budget'])
                st.session_state.plano_completo['recomendacoes_publico'] = gerar_recomendacoes_publico(params, st.session_state.plano_completo['recomendacao_estrategica'])
                st.session_state.plano_completo['cronograma'] = gerar_cronograma(params, st.session_state.plano_completo['recomendacao_estrategica'], st.session_state.plano_completo['distribuicao_budget'])
    
    # Exibir resultados
    if st.session_state.current_step >= 1:
        etapa_funil = st.session_state.params.get('etapa_funil', 'Topo')
        st.success(f"**Etapa do Funil Detectada:** {etapa_funil}")
        
        st.markdown("## üìå Recomenda√ß√£o Estrat√©gica")
        st.markdown(st.session_state.plano_completo.get('recomendacao_estrategica', 'Em processamento...'))
        
        st.markdown("## üìä Distribui√ß√£o de Budget")
        st.markdown(st.session_state.plano_completo.get('distribuicao_budget', 'Em processamento...'))
        
        st.markdown("## üìà Previs√£o de Resultados")
        st.markdown(st.session_state.plano_completo.get('previsao_resultados', 'Em processamento...'))
        
        st.markdown("## üéØ Recomenda√ß√µes de P√∫blico")
        st.markdown(st.session_state.plano_completo.get('recomendacoes_publico', 'Em processamento...'))
        
        st.markdown("## üìÖ Cronograma Sugerido")
        st.markdown(st.session_state.plano_completo.get('cronograma', 'Em processamento...'))
        
        # Bot√£o para baixar o plano completo
        if all(key in st.session_state.plano_completo for key in ['recomendacao_estrategica', 'distribuicao_budget', 'previsao_resultados', 'recomendacoes_publico', 'cronograma']):
            plano_completo = "\n\n".join([
                f"# üìä Plano de M√≠dia Completo ({etapa_funil} do Funil)\n",
                f"**Campanha:** {st.session_state.params['objetivo_campanha']}",
                f"**Budget:** R$ {st.session_state.params['budget']:,.2f}",
                f"**Per√≠odo:** {st.session_state.params['periodo']}\n",
                "## üìå Recomenda√ß√£o Estrat√©gica",
                st.session_state.plano_completo['recomendacao_estrategica'],
                "## üìä Distribui√ß√£o de Budget",
                st.session_state.plano_completo['distribuicao_budget'],
                "## üìà Previs√£o de Resultados",
                st.session_state.plano_completo['previsao_resultados'],
                "## üéØ Recomenda√ß√µes de P√∫blico",
                st.session_state.plano_completo['recomendacoes_publico'],
                "## üìÖ Cronograma Sugerido",
                st.session_state.plano_completo['cronograma']
            ])
            
            st.download_button(
                label="üì• Baixar Plano Completo",
                data=plano_completo,
                file_name=f"plano_midia_{etapa_funil}_{st.session_state.params['objetivo_campanha'][:30]}.md",
                mime="text/markdown"
            )

with tab2:
    st.header("Exemplos por Etapa do Funil")
    
    tab_topo, tab_meio, tab_fundo = st.tabs(["Topo", "Meio", "Fundo"])
    
    with tab_topo:
        st.markdown("""
        ### üìã Exemplo - Topo do Funil (Awareness)
        **Campanha:** Conscientiza√ß√£o da Marca X  
        **Objetivo:** Aumentar reconhecimento de marca  
        **Budget:** R$ 150.000,00  
        **Per√≠odo:** 2 meses  
        **OKRs Relevantes:** Impress√µes, Alcance, Frequ√™ncia, CPM, Brand Lift  
        """)
        
        st.markdown("""
        #### üìä Aloca√ß√£o Recomendada:
        | Plataforma | % Budget | Valor (R$) | Criativos Principais |
        |------------|----------|------------|----------------------|
        | Meta Ads | 50% | 75.000 | V√≠deo (60%), Est√°tico (40%) |
        | YouTube | 30% | 45.000 | V√≠deo (100%) |
        | Program√°tica | 20% | 30.000 | Banner (70%), V√≠deo (30%) |
        
        #### üìà M√©tricas Esperadas:
        - Impress√µes: ~5.000.000
        - Alcance: ~2.200.000
        - Frequ√™ncia m√©dia: 2.3
        - CPM: R$ 15-20
        """)
    
    with tab_meio:
        st.markdown("""
        ### üìã Exemplo - Meio do Funil (Considera√ß√£o)
        **Campanha:** Engajamento Produto Y  
        **Objetivo:** Gerar interesse no produto  
        **Budget:** R$ 80.000,00  
        **Per√≠odo:** 1 m√™s  
        **OKRs Relevantes:** Engajamento, CTR, Video Views, Lead Generation  
        """)
        
        st.markdown("""
        #### üìä Aloca√ß√£o Recomendada:
        | Plataforma | % Budget | Valor (R$) | Criativos Principais |
        |------------|----------|------------|----------------------|
        | Meta Ads | 40% | 32.000 | Carrossel (50%), V√≠deo (50%) |
        | LinkedIn | 30% | 24.000 | Est√°tico (70%), V√≠deo (30%) |
        | Google Ads | 30% | 24.000 | Display (60%), V√≠deo (40%) |
        
        #### üìà M√©tricas Esperadas:
        - CTR: 1.8-2.5%
        - Video Views: ~500.000
        - Leads: ~2.000
        """)
    
    with tab_fundo:
        st.markdown("""
        ### üìã Exemplo - Fundo do Funil (Convers√£o)
        **Campanha:** Vendas Produto Z  
        **Objetivo:** Gerar vendas diretas  
        **Budget:** R$ 120.000,00  
        **Per√≠odo:** 3 semanas  
        **OKRs Relevantes:** Convers√µes, ROAS, CPA, Vendas  
        """)
        
        st.markdown("""
        #### üìä Aloca√ß√£o Recomendada:
        | Plataforma | % Budget | Valor (R$) | Criativos Principais |
        |------------|----------|------------|----------------------|
        | Meta Ads | 60% | 72.000 | Cole√ß√£o (70%), Est√°tico (30%) |
        | Google Ads | 40% | 48.000 | Shopping (100%) |
        
        #### üìà M√©tricas Esperadas:
        - Convers√µes: ~1.500
        - ROAS: 3.5x
        - CPA: R$ 80-100
        """)

# Rodap√©
st.markdown("---")
st.caption("""
Ferramenta de IA para Planejamento de M√≠dia - Otimize suas campanhas com aloca√ß√£o inteligente de budget por etapa do funil.
""")
